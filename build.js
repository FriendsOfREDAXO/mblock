#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Terser für Minification
let terser;
try {
    terser = require('terser');
} catch (e) {
    console.log('📦 Installiere Terser...');
    require('child_process').execSync('npm install terser --no-save', { stdio: 'inherit' });
    terser = require('terser');
}

// Modular source files in correct dependency order
const sourceFiles = [
    path.join(__dirname, 'assets', 'js', 'mblock-core.js'),
    path.join(__dirname, 'assets', 'js', 'widgets.js'),
    path.join(__dirname, 'assets', 'js', 'addonfixes.js'),
    path.join(__dirname, 'assets', 'js', 'mblock-management.js'),
    path.join(__dirname, 'assets', 'js', 'mblock-features.js')
];

const targetFile = path.join(__dirname, 'assets', 'mblock.js');
const minifiedFile = path.join(__dirname, 'assets', 'mblock.min.js');

console.log('🔧 MBlock Modular Build Script gestartet...');
console.log('📄 Source modules:', sourceFiles.length);
console.log('📄 Target combined:', targetFile);
console.log('📄 Target minified:', minifiedFile);

// Check if all source files exist
for (const file of sourceFiles) {
    if (!fs.existsSync(file)) {
        console.error('❌ Source module nicht gefunden:', file);
        process.exit(1);
    }
}

// Combine all modular files
let combinedCode = '';
combinedCode += '/**\n';
combinedCode += ' * MBlock Combined - Generated from modular sources\n';
combinedCode += ' * \n';
combinedCode += ` * Build Date: ${new Date().toString()}\n`;
combinedCode += ` * Source Files: ${sourceFiles.map(f => path.basename(f)).join(' + ')}\n`;
combinedCode += ' * \n';
combinedCode += ' * This file is automatically generated. Do not edit manually!\n';
combinedCode += ' * Edit the individual modular files instead.\n';
combinedCode += ' */\n\n';

sourceFiles.forEach((file, index) => {
    const fileName = path.basename(file);
    const moduleContent = fs.readFileSync(file, 'utf8');
    
    console.log(`✅ Lade Modul ${index + 1}/${sourceFiles.length}: ${fileName} (${moduleContent.length} Zeichen)`);
    
    combinedCode += `// ${'='.repeat(20)} ${fileName.toUpperCase()} ${'='.repeat(20)}\n`;
    combinedCode += moduleContent;
    combinedCode += '\n\n';
});

console.log('✅ Module kombiniert:', combinedCode.length, 'Zeichen');

// Write combined file
fs.writeFileSync(targetFile, combinedCode);
console.log('✅ Kombinierte Datei erstellt:', targetFile);

// Minification
const options = {
    compress: {
        dead_code: true,
        drop_console: false,
        passes: 2
    },
    mangle: {
        reserved: ['$', 'jQuery', 'MBlockClipboard', 'MBlockWidgets', 'MBlockAddonFixes', 'MBlockUtils', 'MBlockOnlineToggle', 'openLinkMap', 'deleteREXLink']
    },
    format: {
        comments: false
    },
    sourceMap: true
};

console.log('⚙️ Minifiziere kombinierte Datei...');

terser.minify(combinedCode, options).then(result => {
    if (result.error) {
        console.error('❌ Minification Fehler:', result.error);
        process.exit(1);
    }
    
    fs.writeFileSync(minifiedFile, result.code);
    console.log('✅ Minifizierte Datei erstellt:', minifiedFile);
    
    if (result.map) {
        fs.writeFileSync(minifiedFile + '.map', result.map);
        console.log('🗺️ Source Map erstellt');
    }
    
    const originalSize = combinedCode.length;
    const minifiedSize = result.code.length;
    const savings = ((originalSize - minifiedSize) / originalSize * 100).toFixed(1);
    
    console.log('\n📈 Statistiken:');
    console.log('   Module:', sourceFiles.length);
    console.log('   Kombiniert:', originalSize, 'Zeichen');
    console.log('   Minifiziert:', minifiedSize, 'Zeichen');
    console.log('   Ersparnis:', savings + '%');
    console.log('\n🎉 Modular Build erfolgreich!');
    
}).catch(error => {
    console.error('❌ Build Fehler:', error);
    process.exit(1);
});
